package org.neuroph.netbeans.imr;

import java.io.File;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.neuroph.core.NeuralNetwork;
import org.neuroph.core.data.DataSet;
import org.neuroph.core.data.DataSetRow;
import org.neuroph.imgrec.ImageRecognitionPlugin;
import org.neuroph.imgrec.image.Image;
import org.neuroph.imgrec.image.ImageFactory;
import org.neuroph.imgrec.image.ImageJ2SE;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.neuroph.netbeans.imr//IMR//EN",
autostore = false)
public final class ImgRecTestTopComponent extends TopComponent implements LookupListener {

    private static ImgRecTestTopComponent instance;
    private static final String PREFERRED_ID = "ImgRecTestTopComponent";
    private JFileChooser testImageFileChooser;
    private NeuralNetwork selectedNeuralNetwork;
    private DataSet selectedTrainingSet;
  
    public ImgRecTestTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ImgRecTestTopComponent.class, "CTL_ImgRecTestTopComponent"));
        setToolTipText(NbBundle.getMessage(ImgRecTestTopComponent.class, "HINT_CTL_ImgRecTestTopComponent"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        testResultsTextArea = new javax.swing.JTextArea();
        testImageLabel = new javax.swing.JLabel();
        testAllButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        selectImageButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        testingNetworkField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        testDataField = new javax.swing.JTextField();

        testResultsTextArea.setColumns(20);
        testResultsTextArea.setRows(5);
        jScrollPane1.setViewportView(testResultsTextArea);

        testImageLabel.setBackground(new java.awt.Color(255, 255, 255));
        testImageLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testImageLabel.setMaximumSize(new java.awt.Dimension(300, 300));
        testImageLabel.setPreferredSize(new java.awt.Dimension(104, 104));

        org.openide.awt.Mnemonics.setLocalizedText(testAllButton, org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.testAllButton.text")); // NOI18N
        testAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAllButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(clearButton, org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.clearButton.text")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(selectImageButton, org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.selectImageButton.text")); // NOI18N
        selectImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectImageButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.jLabel1.text")); // NOI18N

        testingNetworkField.setEditable(false);
        testingNetworkField.setText(org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.testingNetworkField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.jLabel2.text")); // NOI18N

        testDataField.setEditable(false);
        testDataField.setText(org.openide.util.NbBundle.getMessage(ImgRecTestTopComponent.class, "ImgRecTestTopComponent.testDataField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                    .addComponent(testImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(46, 46, 46)
                                .addComponent(testAllButton)
                                .addGap(6, 6, 6)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(saveButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(testingNetworkField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(testDataField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(testingNetworkField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(testDataField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(testImageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectImageButton)
                    .addComponent(testAllButton)
                    .addComponent(clearButton)
                    .addComponent(saveButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void selectImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectImageButtonActionPerformed
        testImage();
}//GEN-LAST:event_selectImageButtonActionPerformed

    private void testAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAllButtonActionPerformed
     testWholeDataSet();
}//GEN-LAST:event_testAllButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clearTestArea();
}//GEN-LAST:event_clearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
       selectedNeuralNetwork.save("savedActivenetwork.nnet");
    }//GEN-LAST:event_saveButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectImageButton;
    private javax.swing.JButton testAllButton;
    private javax.swing.JTextField testDataField;
    private javax.swing.JLabel testImageLabel;
    private javax.swing.JTextArea testResultsTextArea;
    private javax.swing.JTextField testingNetworkField;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized ImgRecTestTopComponent getDefault() {
        if (instance == null) {
            instance = new ImgRecTestTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the IMRTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ImgRecTestTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ImgRecTestTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ImgRecTestTopComponent) {
            return (ImgRecTestTopComponent) win;
        }
        Logger.getLogger(ImgRecTestTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    Lookup.Result<NeuralNetwork> neuralNetResultSets;
    Lookup.Result<DataSet> trainingSetNetResultSets;

    @Override
    public void resultChanged(LookupEvent le) {
        Lookup.Result r = (Lookup.Result) le.getSource();
        Collection c = r.allInstances();
        if (!c.isEmpty()) {
            Object item = c.iterator().next();
            
            if (item instanceof NeuralNetwork) {
                selectedNeuralNetwork = (NeuralNetwork) item;
                testingNetworkField.setText(selectedNeuralNetwork.getLabel());
            } else if (item instanceof DataSet) {
                selectedTrainingSet = (DataSet) item;
                testDataField.setText(selectedTrainingSet.getLabel());
            }
        }
    }

    @Override
    public void componentOpened() {
        neuralNetResultSets = WindowManager.getDefault().findTopComponent("projectTabLogical_tc").getLookup().lookupResult(NeuralNetwork.class);
        neuralNetResultSets.addLookupListener(this);
        
        trainingSetNetResultSets = WindowManager.getDefault().findTopComponent("projectTabLogical_tc").getLookup().lookupResult(DataSet.class);
        trainingSetNetResultSets.addLookupListener(this);        
    }

    @Override
    public void componentClosed() {
        neuralNetResultSets.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }


    public void testWholeDataSet() {
        testResultsTextArea.setText("");
        Iterator<DataSetRow> iterator = selectedTrainingSet.iterator();
        while(iterator.hasNext()) {
            DataSetRow trainingElement = iterator.next();
            selectedNeuralNetwork.setInput(trainingElement.getInput());
            selectedNeuralNetwork.calculate();
            double[] networkOutput = selectedNeuralNetwork.getOutput();
            testResultsTextArea.append(arrayToString(networkOutput) + "\r\n");
        }

    }

    public void testImage() {
                if (testImageFileChooser == null) {
                    testImageFileChooser = new JFileChooser();
                    testImageFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                    testImageFileChooser.setFileFilter(new FileFilter() {
                                    @Override
                                    public boolean accept(File f) {
                                            if(f.isDirectory()) {
                                                    return true;
                                            }
                                            String name = f.getName();
                                            if(name.endsWith(".png") || name.endsWith(".PNG") ||
                                                            name.endsWith(".jpg") || name.endsWith(".JPG")) {
                                                    return true;
                                            }
                                            return false;
                                    }
                                    @Override
                                    public String getDescription() {
                                            // TODO Auto-generated method stub
                                            return null;
                                    }
                            });
                }

            int returnVal = testImageFileChooser.showDialog(null, "Select Image");
            if(returnVal == JFileChooser.APPROVE_OPTION) {
			// ovde uzmi fajl i prikazi rezultat testa
            File imgFile = testImageFileChooser.getSelectedFile();
//            try {
              //  BufferedImage img = ImageIO.read(imgFile);
              //  testImageLabel.setIcon(new ImageIcon(img));
                
                Image img = ImageFactory.getImage(imgFile);
                testImageLabel.setIcon(new ImageIcon(((ImageJ2SE) img).getBufferedImage()));

                ImageRecognitionPlugin imageRecognition = (ImageRecognitionPlugin)selectedNeuralNetwork.getPlugin(ImageRecognitionPlugin.class);
                HashMap<String, Double> output = imageRecognition.recognizeImage(img);

                String outputString = "";
                NumberFormat numberFormat = DecimalFormat.getNumberInstance();
		numberFormat.setMaximumFractionDigits(4);
                Iterator keys = output.keySet().iterator();
                while(keys.hasNext()) {
                    String key = (String)keys.next();
                    outputString += key + " : " + numberFormat.format( output.get(key) ) + "\n";
                }

                testResultsTextArea.setText(outputString);

//            } catch (IOException ioe) {
//                System.err.println(ioe.getStackTrace());
//            }
        }
    }

    public void clearTestArea() {
        testResultsTextArea.setText("");
    }

    private String arrayToString(double[] a) {
        StringBuilder result = new StringBuilder();
        if (a.length > 0) {
            result.append(a[0]);
            for (int i=1; i<a.length; i++) {
                result.append(a[i] + " ");
            }
        }
        return result.toString();
    }
}
